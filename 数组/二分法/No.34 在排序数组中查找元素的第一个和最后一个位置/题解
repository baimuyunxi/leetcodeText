### 二分法：

思路就是，先定义一个要返回的数组，默认值均为-1， 然后使用二分查找看是否存在目标数，如果找到第一个存在的，然后就将数组的默认值改为当前下标（这是为了防止数组中只有一个值与目标值相同的情况出现），然后再分别向左寻找最左侧和最右侧的与目标值相同的下标，再赋值到数组相应位置，最后切记，要跳出大的while循环，最后返回数组。

```java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] range = new int[2];
        //不存在初始化
        Arrays.fill(range, -1);
        //存在
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = (right - left) / 2 + left;
            if (nums[mid] < target) 
                left = mid + 1;
            else if (nums[mid] > target) 
                right = mid - 1;
            else {
                range[0] = range[1] = mid;
                int temp = mid + 1;
                //右边
                while (temp < nums.length && nums[temp] == target) {
                    range[1] = temp++;
                }
                //左边
                while (mid >= 0 && nums[mid] == target) {
                    range[0] = mid--;
                }
                break;
            }
        }
        return range;
    }
}
```

