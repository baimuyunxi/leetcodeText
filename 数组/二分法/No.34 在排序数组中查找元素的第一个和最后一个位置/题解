二分法：
思路就是，先定义一个要返回的数组，默认值均为-1， 然后使用二分查找看是否存在目标数，如果找到第一个存在的，然后就将数组的默认值改为当前下标（这是为了防止数组中只有一个值与目标值相同的情况出现），然后再分别向左寻找最左侧和最右侧的与目标值相同的下标，再赋值到数组相应位置，最后切记，要跳出大的while循环，最后返回数组。

```java
package com.saint.leetcode.leetcode.editor.cn;

import java.util.ArrayList;
//给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。 
//
// 如果数组中不存在目标值 target，返回 [-1, -1]。 
//
// 你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。 
//
// 
//
// 示例 1： 
//
// 
//输入：nums = [5,7,7,8,8,10], target = 8
//输出：[3,4] 
//
// 示例 2： 
//
// 
//输入：nums = [5,7,7,8,8,10], target = 6
//输出：[-1,-1] 
//
// 示例 3： 
//
// 
//输入：nums = [], target = 0
//输出：[-1,-1] 
//
// 
//
// 提示： 
//
// 
// 0 <= nums.length <= 10⁵ 
// -10⁹ <= nums[i] <= 10⁹ 
// nums 是一个非递减数组 
// -10⁹ <= target <= 10⁹ 
// 
//
// Related Topics 数组 二分查找 👍 2123 👎 0

/**
 * 在排序数组中查找元素的第一个和最后一个位置
 *
 * @author saint
 */
public class P34_FindFirstAndLastPositionOfElementInSortedArray {
    public static void main(String[] args) {
        Solution solution = new P34_FindFirstAndLastPositionOfElementInSortedArray().new Solution();

    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public int[] searchRange(int[] nums, int target) {
            int[] range = new int[2];
            //不存在初始化
            Arrays.fill(range, -1);
            //存在
            int left = 0, right = nums.length - 1;
            while (left <= right) {
                int mid = (right - left) / 2 + left;
                if (nums[mid] < target) left = mid + 1;
                else if (nums[mid] > target) right = mid - 1;
                else {
                    range[0] = range[1] = mid;
                    int temp = mid + 1;
                    //右边
                    while (temp < nums.length && nums[temp] == target) {
                        range[1] = temp++;
                    }
                    //左边
                    while (mid >= 0 && nums[mid] == target) {
                        range[0] = mid--;
                    }
                    break;
                }
            }
            return range;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}

```

